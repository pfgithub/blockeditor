// the file context is std.type.struct

// only allowed in the top level map. pauses parsing and calls mysyntax(...remaining_text)
// %usesyntax mysyntax;

// run before everything. adds an extension to the scope, so when checking if 'a.b' exists
// first it asks A and then it asks the extension. if A:has('m') false, checks Extension:has(a, m)
// %extend myextensions;

Vector2 := [%comptime T] => struct [
%fields;
    .x: T = 0,
    .y: T = 0,

%on_type;
    .init = [] => Vector2[];

    + = onEach: [a, b] => a + b; // slot or lhs
    - = onEach: [a, b] => a - b; // slot or lhs
    * = onEach: [a, b] => a * b; // slot or lhs
    / = onEach: [a, b] => a / b; // slot or lhs
    == = onEach: [a, b] => a == b; // lhs only
    != = onEach: [a, b] => a != b; // lhs only

    // a := Vector2[f32]: [1, 1] + [2, 2]; // Vector2[T].+[a, b]
    // a := Vector2[f32][1, 1] + [2, 2]; // a.+[b]
    // a := [1, 1] + Vector2[f32][2, 2]; // 'unknown' does not support builtin.fromMap

    // a := Vector2[bool]: [1, 1] == [2, 2]; // neither 'unknown' nor 'bool' supports '=='
    // a := Vector2[i32][1, 1] == [2, 2]; // ok
    // a := [1, 1] == Vector2[i32][2, 2]; // 'unknown' does not support builtin.fromMap
];

builtin := #builtin;
std := builtin.import: .std;
start := [] => std.noreturn: (
    (
        %defer std.log.info: "at end of scope";
        world := (std.slice: std.u8): "world";
        std.log.info: "Hello \(world)!";

        std.for[ ["abc", "def"] ]: val(std.void) => std.log.info: "abc\(val)";
    )
    std.process.exit: 0;
);
std.build.main = [ // std.build.Folder
    "sample.txt" = "Example",
    "app" = std.compile: [.riscv64.linux, [ "_start" = start ]],
];

my_type := std.struct: [
    .fields = [
        .x = std.f32,
        .y = std.f32,
        // to make a private field, use a symbol key. these are all public.
    ],

    some_decl := std.f32: 25;
    .decls = [
        .some_decl = some_decl,
    ],
];

