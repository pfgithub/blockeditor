// the file context is std.type.struct

// only allowed in the top level map. pauses parsing and calls mysyntax(...remaining_text)
// %usesyntax mysyntax;

// run before everything. adds an extension to the scope, so when checking if 'a.b' exists
// first it asks A and then it asks the extension. if A:has('m') false, checks Extension:has(a, m)
// %extend myextensions;

std := @std;
start := %fn(std.void) std.noreturn: (
    (
        %defer std.log.info: "at end of scope";
        world := (std.slice: std.u8): "world";
        std.log.info: "Hello \(world)!";
    )
    std.process.exit: 0;
);
std.build.main = [ // std.build.Folder
    "sample.txt" = "Example",
    "app" = std.compile: [.riscv64.linux, [ "_start" = start ]],
];

my_type := std.struct: [
    .fields = [
        .x = std.f32,
        .y = std.f32,
        // to make a private field, use a symbol key. these are all public.
    ],

    some_decl := std.f32: 25;
    .decls = [
        .some_decl = some_decl,
    ],
];

