// [ ] the root of cv is a build function
std.build = () std.build.Folder (
    "filename.txt" = std.build.compile.x86_64[
        "_start" = mainFn,
    ],
);


// [ ] function for the riscv debugger to call when displaying a type. these functions
//      are called and then state is restored
//     [ ] whole custom guis for a type, eg displaying the state of a chess board

// [ ] implicit context

// [ ] custom emit targets

// [ ] initializing a map into a pointer directly, from inside of a labeled block
stacklocal := () => {
    mystackvar := *MyStruct: .new_stack: :stackbreak {
        stackbreak.ptr = [ // init map in ptr: stackbreak.ptr
            .x = 25, // init number in ptr: stackbreak.ptr.x
            .y = 32, // init number in ptr: stackbreak.ptr.y
        ];
        stackbreak.ptr.x = 56;
        stackbreak.breakPreFilled(); // break without putting a value in
    };
    (x := .x, y := .y) := mystackvar;
    x = 5;

    
}

// [ ] string interpolation
main := () => {
    std.log.info: "My value is \{add(5, 6)}!";
};

// [ ] compile time package management
pkgs := std.package_manager (
    // any files loaded from the package manager are given implicit context
    // so they can use the global lockfile
    // any package not in the lockfile must be downloaded and have its lockfile
    // read and appended
    .lockfile = "",
    .dependencies = (
        .ui = ("std/ui", "hash1"),
    ),
    .url_overrides = (
        "hash1" = "/path/to/hash1",
    ),
);

// [ ] gui
Background := () {
    ZStack(): (
        .size: () Rect(.tint = Theme.colors.window_bg),
        .fill: () ContextMenu(): () (
            .background = ContextMenu.BackgroundCatcher(): () (
                Theme.ContextMenu.BackgroundCatcher()
            ),
            .menu = ContextMenu.Menu(): () (
                Theme.ContextMenu.Menu(): () (
                    ContextMenu.Item(): () (
                        Theme.ContextMenu.Item(): () (

                        ),
                    ),
                ),
            ),
        ),
    ),
};
Background2 := () {
    ZStack(): () (
        .size: () Rect(.tint = Theme.colors.window_bg),
        .fill: () Theme.ContextMenu(): () (
            Theme.ContextMenuItem(.label = () Theme.Text("Launch Text Editor <App.zig>"), .onclick = () launch(Blocks.TextEditor)),
            Theme.ContextMenuItem(.label = () Theme.Text("Launch Ball"), .onclick = () launch(Blocks.Ball)),
            Theme.ContextMenuItem(.label = () Theme.Text("Launch Debugviewer1"), .onclick = () launch(Blocks.Debugviewer)),
            Theme.ContextMenuItem(.label = () Theme.Text("Launch Debugviewer2"), .onclick = () launch(Blocks.Debugviewer)),
            Theme.ContextMenuItem(.label = () Theme.Text("Launch Tree"), .onclick = () launch(Blocks.Tree)),
            Theme.ContextMenuItem(.label = () Theme.Text("Launch Minigamer <sponge>"), .onclick = () launch(Blocks.Minigamer)),
        ),
    );
};